#This file was originally generated by PyScripter's unitest wizard

import unittest
from ddt import data, unpack, ddt
import sys

sys.path.append("..\\")
from fuzzycalc.domain import RationalRange, IntegerRange

class TestRationalRange(unittest.TestCase):

    def test_boundaries_low_acc(self):
        domain = RationalRange(0, 1, 10)
        arr = [x for x in domain]
        self.assertAlmostEqual(0.0, arr[0])
        self.assertAlmostEqual(1.0, arr[-1])

    def test_boundaries_high_acc(self):
        domain = RationalRange(0, 1, 10000)
        arr = [x for x in domain]
        self.assertAlmostEqual(0.0, arr[0])
        self.assertAlmostEqual(1.0, arr[-1])

    def test_boundaries_arbitrary(self):
        domain = RationalRange(-0.92, 152.6, 10000)
        arr = [x for x in domain]
        self.assertAlmostEqual(-0.92, arr[0])
        self.assertAlmostEqual(152.6, arr[-1])

    def test_inner_stability(self):
        domain = RationalRange(-0.92, 152.6, 258)
        arr = [x for x in domain]
        self.assertAlmostEqual(25.856744186, arr[45])

    def test_singleton_inner(self):
        domain = RationalRange(-0.92, -0.92, 258)
        arr = [x for x in domain]
        self.assertEqual(-0.92, arr[45])

    def test_card_normal(self):
        domain = RationalRange(-0.92, 152.6, 258)
        self.assertEqual(153, len(domain))

    def test_card_singleton(self):
        domain = RationalRange(-0.92, -0.92, 258)
        self.assertEqual(0.0, len(domain))

    def test_contains_normal(self):
        domain = RationalRange(-0.92, 152.6, 258)
        self.assertIn(0.7, domain)
        self.assertIn(-0.92, domain)
        self.assertIn(152.6, domain)

    def test_not_contains_normal(self):
        domain = RationalRange(-0.92, 152.6, 258)
        self.assertNotIn(-1.0, domain)
        self.assertNotIn(153.0, domain)

    def test_contains_singleton(self):
        domain = RationalRange(-0.92, -0.92, 258)
        self.assertIn(-0.92, domain)
        self.assertNotIn(153.0, domain)

class TestIntegerRange(unittest.TestCase):

    def test_boundaries_low_acc(self):
        domain = IntegerRange(0, 1)
        arr = [x for x in domain]
        self.assertAlmostEqual(0.0, arr[0])
        self.assertAlmostEqual(1.0, arr[-1])

    def test_boundaries_arbitrary(self):
        domain = IntegerRange(-0.92, 152.6)
        arr = [x for x in domain]
        self.assertAlmostEqual(0, arr[0])
        self.assertAlmostEqual(152, arr[-1])

    def test_inner_stability(self):
        domain = IntegerRange(0, 152)
        arr = [x for x in domain]
        self.assertAlmostEqual(45, arr[45])

    def test_singleton_inner(self):
        domain = IntegerRange(-0.92, -0.92)
        arr = [x for x in domain]
        self.assertEqual(0, arr[0])

    def test_card_normal(self):
        domain = IntegerRange(-0.92, 152.6)
        self.assertEqual(152, len(domain))

    def test_card_singleton(self):
        domain = IntegerRange(-0.92, -0.92)
        self.assertEqual(0.0, len(domain))

    def test_contains_normal(self):
        domain = IntegerRange(-0.92, 152.6)
        self.assertIn(0, domain)
        self.assertIn(25, domain)
        self.assertIn(152, domain)

    def test_not_contains_normal(self):
        domain = IntegerRange(-0.92, 152.6)
        self.assertNotIn(-1.0, domain)
        self.assertNotIn(152.6, domain)

    def test_contains_singleton(self):
        domain = IntegerRange(-0.92, -0.92)
        self.assertIn(0, domain)
        self.assertNotIn(-0.92, domain)

if __name__ == '__main__':
    unittest.main()
