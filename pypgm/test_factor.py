#This file was originally generated by PyScripter's unitest wizard

import unittest
from pypgm.factor import Factor

class TestFactor(unittest.TestCase):

    def setUp(self):
        self.C = Factor(name='Cancer',
                        values=["no", "yes"],
                        cpd=[0.99, 0.01])
        self.T = Factor(name='Test',
                        values=["pos", "neg"], cond=[self.C],
                        cpd=[0.2, 0.8, 0.9, 0.1])

        self.m =  self.C._map(self.T.var)

    def tearDown(self):
        pass

    def test_var(self):
        self.assertEqual(1, len(self.C.var))
        self.assertEqual('Cancer', self.C.var[0].name)

        self.assertEqual(2, len(self.T.var))
        self.assertEqual('Cancer', self.T.var[0].name)
        self.assertEqual('Test', self.T.var[1].name)

    def test_card(self):
        self.assertEqual(2, len(self.C.pcard))
        self.assertEqual(2, self.C.pcard[0])

        self.assertEqual(3, len(self.T.pcard))
        self.assertEqual(4, self.T.pcard[0])

    def test_cpd(self):
        self.assertEqual(2, len(self.C.cpd))
        self.assertEqual(0.99, self.C.cpd[0])
        self.assertEqual(0.01, self.C.cpd[1])

        self.assertEqual(4, len(self.T.cpd))
        self.assertEqual(0.2, self.T.cpd[0])
        self.assertEqual(0.8, self.T.cpd[1])
        self.assertEqual(0.9, self.T.cpd[2])
        self.assertEqual(0.1, self.T.cpd[3])

    def test_map(self):
        self.assertEqual(1, len(self.m))
        self.assertEqual(0, self.m[0])

    def test_ass(self):
        self.assertEqual(['no'], self.T._ass(0, self.m))
        self.assertEqual(['no'], self.T._ass(1, self.m))
        self.assertEqual(['yes'], self.T._ass(2, self.m))
        self.assertEqual(['yes'], self.T._ass(-1, self.m))
        self.assertEqual(['no'], self.T._ass(4, self.m))

    def test_ass2index(self):
        self.assertEqual(self.C._ass2index(['no']), 0)
        self.assertEqual(self.C._ass2index(['yes']), 1)

        self.assertEqual(self.T._ass2index(['no', 'pos']), 0)
        self.assertEqual(self.T._ass2index(['no', 'neg']), 1)
        self.assertEqual(self.T._ass2index(['yes', 'pos']), 2)
        self.assertEqual(self.T._ass2index(['yes', 'neg']), 3)

    def test_index2ass(self):
        self.assertEqual(['no'], self.C._index2ass(0))
        self.assertEqual(['yes'], self.C._index2ass(1))

        self.assertEqual(['no', 'neg'], self.T._index2ass(1))
        self.assertEqual(['yes', 'neg'], self.T._index2ass(3))
        self.assertEqual(['no', 'pos'], self.T._index2ass(0))
        self.assertEqual(['yes', 'pos'], self.T._index2ass(2))

    def test__mul__(self):
        P = self.C * self.T
        self.assertEqual(4, len(P.cpd))
        self.assertAlmostEqual(0.198, P.cpd[0])
        self.assertAlmostEqual(0.001, P.cpd[3])
        self.assertEqual(2, len(P.var))
        self.assertEqual('Cancer', P.var[0].name)
        self.assertEqual('Test', P.var[1].name)

    def testmarginal(self):
        M = self.T.marginal(self.C.var[-1])
        self.assertEqual(2, len(M.cpd))
        self.assertAlmostEqual(1.1, M.cpd[0])
        self.assertAlmostEqual(0.9, M.cpd[1])
        self.assertEqual(1, len(M.var))
        self.assertEqual('Test', M.var[0].name)

        M = self.T.marginal(self.T.var[-1])
        self.assertEqual(2, len(M.cpd))
        self.assertAlmostEqual(1.0, M.cpd[0])
        self.assertAlmostEqual(1.0, M.cpd[1])
        self.assertEqual(1, len(M.var))
        self.assertEqual('Cancer', M.var[0].name)

    def testreduce(self):
        M = self.T.reduce(var=self.C.var[-1], value='yes')
        self.assertEqual(2, len(M.cpd))
        self.assertAlmostEqual(0.9, M.cpd[0])
        self.assertAlmostEqual(0.1, M.cpd[1])
        self.assertEqual(1, len(M.var))
        self.assertEqual('Test', M.var[0].name)

        M = self.T.reduce(var=self.C.var[-1], value='no')
        self.assertEqual(2, len(M.cpd))
        self.assertAlmostEqual(0.2, M.cpd[0])
        self.assertAlmostEqual(0.8, M.cpd[1])
        self.assertEqual(1, len(M.var))
        self.assertEqual('Test', M.var[0].name)

    def test__div__(self):
        M = (self.T*self.C)/self.C
        self.assertEqual(4, len(M.cpd))
        self.assertAlmostEqual(0.2, M.cpd[0])
        self.assertAlmostEqual(0.8, M.cpd[1])
        self.assertAlmostEqual(0.9, M.cpd[2])
        self.assertAlmostEqual(0.1, M.cpd[3])
        self.assertEqual(2, len(M.var))
        self.assertEqual('Cancer', M.var[0].name)
        self.assertEqual('Test', M.var[1].name)

    def test__abs__(self):
        self.assertEqual(2, abs(self.C))
        self.assertEqual(4, abs(self.T))

    def testsum(self):
        self.assertEqual(1.0, self.C.sum())
        self.assertEqual(2.0, self.T.sum())

    def testjoint(self):
        M = self.T.joint()
        self.assertEqual(4, len(M.cpd))
        self.assertAlmostEqual(0.198, M.cpd[0])
        self.assertAlmostEqual(0.792, M.cpd[1])
        self.assertAlmostEqual(0.009, M.cpd[2])
        self.assertAlmostEqual(0.001, M.cpd[3])
        self.assertEqual(2, len(M.var))
        self.assertEqual('Cancer', M.var[0].name)
        self.assertEqual('Test', M.var[1].name)

    def testuncond(self):
        M = self.T.uncond()
        self.assertEqual(2, len(M.cpd))
        self.assertAlmostEqual(0.207, M.cpd[0])
        self.assertAlmostEqual(0.793, M.cpd[1])
        self.assertEqual(1, len(M.var))
        self.assertEqual('Test', M.var[0].name)

    def testquery(self):
        M = self.T.query(query=[self.C], evidence={self.T: 'pos'})
        self.assertEqual(2, len(M.cpd))
        self.assertAlmostEqual(0.9565217391304348, M.cpd[0])
        self.assertAlmostEqual(0.04347826086956522, M.cpd[1])
        self.assertEqual(1, len(M.var))
        self.assertEqual('Cancer', M.var[0].name)

    def test_norm(self):
        M = self.T._norm()
        self.assertEqual(4, len(M.cpd))
        self.assertAlmostEqual(0.1, M.cpd[0])
        self.assertAlmostEqual(0.4, M.cpd[1])
        self.assertAlmostEqual(0.45, M.cpd[2])
        self.assertAlmostEqual(0.05, M.cpd[3])
        self.assertEqual(2, len(M.var))
        self.assertEqual('Cancer', M.var[0].name)
        self.assertEqual('Test', M.var[1].name)

if __name__ == '__main__':
    unittest.main()
